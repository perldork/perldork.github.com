<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Semintelligent - Max Schubert]]></title>
  <link href="http://perldork.github.io/atom.xml" rel="self"/>
  <link href="http://perldork.github.io/"/>
  <updated>2014-02-23T17:11:41-05:00</updated>
  <id>http://perldork.github.io/</id>
  <author>
    <name><![CDATA[Max Schubert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Avoid Class Variables in Ruby for Web Applications]]></title>
    <link href="http://perldork.github.io/blog/2014/02/23/avoid-class-variables-in-ruby-for-web-applications/"/>
    <updated>2014-02-23T00:00:00-05:00</updated>
    <id>http://perldork.github.io/blog/2014/02/23/avoid-class-variables-in-ruby-for-web-applications</id>
    <content type="html"><![CDATA[<p>When a ruby application runs in a multi-process web container (phusion passenger or puma for example), class variables set in one
instance of the application will not be visible in another instance &ndash; so if you use them be very aware that the setting will purely
apply to the instance of the application in which the variables are set.</p>

<p>If you need to share data across instances of an application, consider using memcache or another host-level data storage mechanism
with a library that makes it easy to get and set data ( like <a href="https://github.com/mperham/dalli">Dalli</a> for ruby ).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jquery Event Handlers - Pitfalls and Tips]]></title>
    <link href="http://perldork.github.io/blog/2013/08/11/jquery-event-handlers-pitfalls-and-tips/"/>
    <updated>2013-08-11T00:00:00-04:00</updated>
    <id>http://perldork.github.io/blog/2013/08/11/jquery-event-handlers-pitfalls-and-tips</id>
    <content type="html"><![CDATA[<p>Always return true or false at the end of the handler; true to allow additional events to fire, false to stop event propogation. If you do not oh boy will you get very strange behavior. For example, in recent Firefox releases you will get an error thrown with HTTP status 0 and message “Error,” yep, that is all you get.</p>

<p>if you have mutiple elementa trigger the same event and the only difference is data ( for example a list of names where clicking posts the name ), write a handler based off of a CSS class selector. Do not create one handler per row or item using unique div IDs as the CSS selector – this eats browser memory quickly!</p>

<p>Save jQuery elements in function scoped variablea and chain events from them – doing $( “selector” ) calls for the same element over and over again is expensive time and memory wise and slows your code down.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Padrino Before and After Blocks in Rspec Tests]]></title>
    <link href="http://perldork.github.io/blog/2013/02/05/using-padrino-before-and-after-blocks-in-rspec-tests/"/>
    <updated>2013-02-05T00:00:00-05:00</updated>
    <id>http://perldork.github.io/blog/2013/02/05/using-padrino-before-and-after-blocks-in-rspec-tests</id>
    <content type="html"><![CDATA[<p>We add in code that allows us to send mock parameters to controller actions via Capybara tests for all controllers while testing -so we can simulate session state ( for example &ndash; user being logged in ). In Rails you do this by re-opening ApplicationController in spec/spec_helper.rb and adding in a before_filter. In Padrino you can do this by adding custom code to app.rb in a before block &ndash; the before block is called for every controller action.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>configure :test do
</span><span class='line'>  before do
</span><span class='line'>    params.keys.each do |param|
</span><span class='line'>      if param =~ /^mock_/
</span><span class='line'>        mock_param = param.gsub(/mock_/, '') 
</span><span class='line'>        session[ mock_param ] = params[ param ]
</span><span class='line'>        logger.debug %{ #{mock_param} set to #{params[ param ]}} 
</span><span class='line'>      end 
</span><span class='line'>    end 
</span><span class='line'>  end 
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
