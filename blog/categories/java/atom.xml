<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Semintelligent - Max Schubert]]></title>
  <link href="http://perldork.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://perldork.github.io/"/>
  <updated>2014-03-15T14:47:28-04:00</updated>
  <id>http://perldork.github.io/</id>
  <author>
    <name><![CDATA[Max Schubert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hints and Tips for Java Developers New to Ruby]]></title>
    <link href="http://perldork.github.io/blog/2014/02/24/hints-and-advice-for-java-developers-new-to-ruby/"/>
    <updated>2014-02-24T22:48:02-05:00</updated>
    <id>http://perldork.github.io/blog/2014/02/24/hints-and-advice-for-java-developers-new-to-ruby</id>
    <content type="html"><![CDATA[<p>Most java developers have a really solid grasp of object-oriented
concepts and patterns, which makes the transition to ruby easy really easy
from that perspective.  Moving from a statically typed to dynamic
language is still a big change and some of the more basic coding practices
change significantly.  Here are some recommendations I&rsquo;ve come up with
based on my experiences doing mentoring with a bunch of java developers
transitioning to ruby on our team and some code patterns I&rsquo;ve heard used
by a colleague of mine who is also mentoring some java developers who
are transitioning to ruby.</p>

<h3>Hints</h3>

<ul>
<li>Minimize the use of class variables &ndash; ruby&rsquo;s class variables have some
strange inheritence rules, and, with multi-process web containers,
they don&rsquo;t act as singletons across all instances of an app on the
same server anyway.</li>
<li>Prefer local variables over instance variables when possible.
Minimizing the scope of a variable in a dynamic language reduces the
possibility of bugs and makes it much easier to see where the variable
is being set and used.</li>
<li>Don&rsquo;t pre-initialize data structures &ndash; no need.  Arrays and hashes are
dynamic and in the vast majority of circumstances pre-sizing them does
not help performance and just leads to more noise in your code.</li>
<li>Snake-case variables .. thing_one and thing_two.</li>
<li>Semi-colons are not needed at the ends of statements ; only use them
when doing single-line method definitions or rare cases where you want
two statements on the same line.</li>
<li>Prefer composition over complex inheritence trees.</li>
<li>Prefer mixins over complex inheritence trees.</li>
</ul>


<h3>Tips</h3>

<ul>
<li>Explore code with irb or <a href="http://pryrepl.org/">Pry</a>. No faster way to
get conversant with ruby than to explore using it from a ruby-based
shell!</li>
</ul>

]]></content>
  </entry>
  
</feed>
