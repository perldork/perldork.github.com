<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rspec | Semintelligent - Max Schubert]]></title>
  <link href="http://perldork.github.io/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://perldork.github.io/"/>
  <updated>2014-03-13T16:09:01-04:00</updated>
  <id>http://perldork.github.io/</id>
  <author>
    <name><![CDATA[Max Schubert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Log Messages With Rspec and Padrino]]></title>
    <link href="http://perldork.github.io/blog/2014/03/13/testing-log-messages-with-rspec-and-padrino/"/>
    <updated>2014-03-13T14:41:08-04:00</updated>
    <id>http://perldork.github.io/blog/2014/03/13/testing-log-messages-with-rspec-and-padrino</id>
    <content type="html"><![CDATA[<p>.
<blockquote><p>And if you could could go ahead and get a can of psticide and take care<br/>of the roach problem we&rsquo;ve been having that would be great.</p><footer><strong>Office Space</strong></footer></blockquote></p>

<p>While as a general rule testing log output can make tests brittle
because logs are free text and can change easily, there are certainly
cases where testing them makes sense.</p>

<p>In my case our application was missing some really important business
flow logging that we discovered was needed when we attempted to
troubleshoot a production issue. We had to spend a significant amount of
time hunting something down that would have been trivial to find in a
well formatted info log message. I added that logging to the
application and then wanted to make sure these business level log messages
were being emitted at the right places in the application.</p>

<p>To test log messages in Padrino, I added the following helper to our
spec/support/spec_helpers.rb file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>spec/helpers/spec_helpers.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Pass a block and log output will be captured in that block and&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">returned</span> <span class="n">as</span> <span class="n">an</span> <span class="n">array</span> <span class="n">of</span> <span class="n">lines</span> <span class="k">for</span> <span class="n">testing</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def capture_logger_output</span>
</span><span class='line'><span class="sr">  logger.flush</span>
</span><span class='line'><span class="sr">  # This causes messages to be captured in the internal logger array</span>
</span><span class='line'><span class="sr">  # that can be accessed via logger.buffer.</span>
</span><span class='line'><span class="sr">  logger.auto_flush = false&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># Run user&amp;rsquo;s code</span>
</span><span class='line'>  <span class="k">yield</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # Save the log lines captured during the test block</span>
</span><span class='line'><span class="sr">  # NOTE: have to clone otherwise flush clears the referred to array</span>
</span><span class='line'><span class="sr">  buffer = logger.buffer.clone&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">logger</span><span class="o">.</span><span class="n">flush</span>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="n">auto_flush</span> <span class="o">=</span> <span class="kp">true</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  buffer</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now in your tests you can run test code and capture any log messages that
happened during the code run!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>spec/helpers/spec_helpers.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;it &amp;ldquo;should test something&amp;rdquo; do</span>
</span><span class='line'><span class="sr">  messages = capture_logger_output do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">post</span> <span class="sx">%{/to/some/url}</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">set_csrf</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span> <span class="n">last_response</span><span class="o">.</span><span class="n">status</span> <span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">200</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span> <span class="n">messages</span><span class="o">.</span><span class="n">select</span><span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="n">line</span> <span class="o">=~</span> <span class="sr">/general match/</span> <span class="p">}</span><span class="o">.</span><span class="n">first</span> <span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">match</span> <span class="sr">/specific-pattern/</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Happy log testing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When Writing Rspec Tests 15 Pieces of Flair Is Perfect Just Ignore Brian]]></title>
    <link href="http://perldork.github.io/blog/2014/02/27/when-writing-rspec-tests-15-pieces-of-flair-is-perfect-just-ignore-brian/"/>
    <updated>2014-02-27T19:59:49-05:00</updated>
    <id>http://perldork.github.io/blog/2014/02/27/when-writing-rspec-tests-15-pieces-of-flair-is-perfect-just-ignore-brian</id>
    <content type="html"><![CDATA[<p><blockquote><p>Stan, Chotchkie&rsquo;s Manager: Now, you know it&rsquo;s up to you whether or not<br/>you want to just do the bare minimum. Or&hellip; well, like Brian, for<br/>example, has thirty seven pieces of flair, okay. And a terrific smile.</p><footer><strong>Office Space</strong></footer></blockquote></p>

<p>Forget Brian, when it comes to writing rspec tests let your lazy come
out.  Do the minimum.  Write a test that just does enough to prove
that your feature or component behaves as expected.</p>

<h3>Do</h3>

<ul>
<li>Test all known user story / requirement business paths ( &ldquo;happy paths&rdquo; )
related to the component or feature.</li>
<li>Write a test that really exercises them with real data ( not mocks
unless you have no other choice but to use mocks ).</li>
<li>Write it so it both proves your code does what it is supposed to do
and so that it teaches other developers looking at it how that part of
the application or component should behave</li>
</ul>


<h3>Don&rsquo;t</h3>

<ul>
<li>Write a placeholder or filler test just so you can say you have test
coverage</li>
<li>Validate every single attribute or piece of data related to the test;
that makes your test very tightly coupled to the implementation and
means that any tiny change to the code requires the test to be updated
as well.  This makes developers hate you and your overly high-maintenance tests.</li>
<li>Be obscure nor clever.  Make the test direct and simple &ndash; the way we&rsquo;d
all like our English to be!</li>
<li>Use mocks unless you absolutely need to.  Why?  Mocks quickly become
lies &ndash; if they are flexible enough to take made up method names they are
likely to continue to take that made up method name even when the real
implementation changes. Now your test lies to everyone when it says
it passes because what it tests is something that is not used in the real
implementation.  The only place I personally feel comfortable with
mocks is when external network-based services are dependencies and
having them reliably be available in development and test environments
is not possible.</li>
</ul>

]]></content>
  </entry>
  
</feed>
